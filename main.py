import asyncio
import json
import os
import random
from datetime import date

# –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton
)

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
load_dotenv() # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

BOT_TOKEN = os.getenv("BOT_TOKEN") or "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–¢–û–öEN"
# –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤
PRO_CODES = {"PRO2025", "BESTUSER"}
VTB_CARD = "2200 1111 2222 3333"
ADMIN_ID = 123456789 # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ------------------ –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• (JSON) ------------------
USERS_FILE = "users_data.json"

def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_users_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª."""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ------------------ –°–û–°–¢–û–Ø–ù–ò–Ø (FSM) ------------------
class UserAction(StatesGroup):
    waiting_for_income = State()
    waiting_for_expense = State()
    waiting_for_goal = State()
    waiting_for_pro_code = State()

# ------------------ –ö–õ–ê–í–ò–ê–¢–£–†–´ ------------------
def get_main_reply_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ú–µ–Ω—é'."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ò∞ –ú–µ–Ω—é")]],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ '–ú–µ–Ω—é', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å..."
    )

def get_main_inline_keyboard(user_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Å –∏–∫–æ–Ω–∫–∞–º–∏."""
    users_data = load_users_data()
    is_pro = users_data.get(user_id, {}).get("pro", False)
    pro_icon = "‚≠ê" if is_pro else "üîì"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ—Ö–æ–¥", callback_data="add_income"),
            InlineKeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")
        ],
        [InlineKeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="goals_menu")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data="tips")],
        [InlineKeyboardButton(text="‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")],
        [InlineKeyboardButton(text=f"{pro_icon} PRO-–¥–æ—Å—Ç—É–ø", callback_data="pro_menu")]
    ])

def get_back_button(callback_data="main_menu"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
    return InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)

# ------------------ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –°–¢–ê–†–¢ ------------------
async def show_main_menu(message: Message, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –≥–ª–∞–≤–Ω–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é."""
    uid = str(message.from_user.id)
    users_data = load_users_data()
    balance = users_data.get(uid, {}).get("balance", 0)
    
    full_text = f"{text}\n\n<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance:,.2f} ‚ÇΩ"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ answer
    try:
        await message.edit_text(full_text, reply_markup=get_main_inline_keyboard(uid))
    except Exception:
        await message.answer(full_text, reply_markup=get_main_inline_keyboard(uid))

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    uid = str(message.from_user.id)
    users_data = load_users_data()
    if uid not in users_data:
        users_data[uid] = {
            "balance": 0.0,
            "history": [],
            "goals": {},
            "pro": False
        }
        save_users_data(users_data)
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.",
        reply_markup=get_main_reply_keyboard()
    )
    await show_main_menu(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '‚ò∞ –ú–µ–Ω—é'
@dp.message(F.text == "‚ò∞ –ú–µ–Ω—é")
async def handle_menu_button(message: Message):
    await show_main_menu(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

@dp.callback_query(F.data == "main_menu")
async def cq_main_menu(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.answer()
    await show_main_menu(cq.message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

# ------------------ –î–û–•–û–î–´ –ò –†–ê–°–•–û–î–´ ------------------
@dp.callback_query(F.data.in_({"add_income", "add_expense"}))
async def cq_add_transaction(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    if cq.data == "add_income":
        await state.set_state(UserAction.waiting_for_income)
        await cq.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n<i>–ü—Ä–∏–º–µ—Ä: 50000 –ó–∞—Ä–ø–ª–∞—Ç–∞</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
        )
    else:
        await state.set_state(UserAction.waiting_for_expense)
        await cq.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n<i>–ü—Ä–∏–º–µ—Ä: 250 –ö–æ—Ñ–µ</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
        )

@dp.message(F.text, UserAction.waiting_for_income)
@dp.message(F.text, UserAction.waiting_for_expense)
async def process_transaction(message: Message, state: FSMContext):
    current_state = await state.get_state()
    op_type = "income" if current_state == UserAction.waiting_for_income else "expense"
    
    try:
        parts = message.text.split(maxsplit=1)
        amount = abs(float(parts[0].replace(',', '.')))
        desc = parts[1] if len(parts) > 1 else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    except (ValueError, IndexError):
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>1000 –ü—Ä–æ–¥—É–∫—Ç—ã</b>")
        return

    await state.clear()
    uid = str(message.from_user.id)
    users_data = load_users_data()

    if op_type == "income":
        users_data[uid]["balance"] += amount
    else:
        users_data[uid]["balance"] -= amount
    
    users_data[uid]["history"].append({
        "date": date.today().isoformat(), "type": op_type, "amount": amount, "desc": desc
    })
    save_users_data(users_data)
    
    await show_main_menu(message, f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>{desc} ({amount:,.2f} ‚ÇΩ)</b>")

# ------------------ –¶–ï–õ–ò ------------------
def get_progress_bar(current, target):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
    progress = (current / target) * 100 if target > 0 else 100
    progress = min(progress, 100)
    filled_blocks = int(progress / 10)
    empty_blocks = 10 - filled_blocks
    return f"[{'‚ñà' * filled_blocks}{'‚ñë' * empty_blocks}] {progress:.1f}%"

@dp.callback_query(F.data == "goals_menu")
async def cq_goals_menu(cq: CallbackQuery):
    await cq.answer()
    uid = str(cq.from_user.id)
    users_data = load_users_data()
    user_goals = users_data.get(uid, {}).get("goals", {})
    balance = users_data.get(uid, {}).get("balance", 0)
    
    text = "üéØ <b>–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:</b>\n\n"
    kb_list = [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å", callback_data="add_goal")]]
    
    if not user_goals:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –°–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!"
    else:
        for name, target in user_goals.items():
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            text += f"<b>{name}</b> ({balance:,.2f} / {target:,.2f} ‚ÇΩ)\n{get_progress_bar(balance, target)}\n\n"
            kb_list.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å '{name}'", callback_data=f"del_goal:{name}")])

    kb_list.append([get_back_button()])
    await cq.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_list))

@dp.callback_query(F.data == "add_goal")
async def cq_add_goal(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.set_state(UserAction.waiting_for_goal)
    await cq.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ –µ—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n<i>–ü—Ä–∏–º–µ—Ä: –ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω 30000</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button("goals_menu")]])
    )

@dp.message(F.text, UserAction.waiting_for_goal)
async def process_new_goal(message: Message, state: FSMContext):
    try:
        # rsplit –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–µ–Ω–∞–º —Ü–µ–ª–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
        name, target_str = message.text.rsplit(maxsplit=1)
        target = float(target_str.replace(',', '.'))
        if target <= 0: raise ValueError
    except (ValueError, IndexError):
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–û—Ç–ø—É—Å–∫ –Ω–∞ –º–æ—Ä–µ 150000</b>")
        return

    await state.clear()
    uid = str(message.from_user.id)
    users_data = load_users_data()
    users_data[uid]["goals"][name.strip()] = target
    save_users_data(users_data)
    
    await message.answer(f"‚úÖ –¶–µ–ª—å ¬´{name.strip()}¬ª –Ω–∞ {target:,.2f} ‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞!")
    # –ò–º–∏—Ç–∏—Ä—É–µ–º CallbackQuery –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é —Ü–µ–ª–µ–π
    await cq_goals_menu(CallbackQuery(id="dummy", from_user=message.from_user, message=message, chat_instance="dummy"))
    
@dp.callback_query(F.data.startswith("del_goal:"))
async def cq_delete_goal(cq: CallbackQuery):
    goal_to_delete = cq.data.split(":", 1)[1]
    uid = str(cq.from_user.id)
    users_data = load_users_data()
    
    if goal_to_delete in users_data[uid]["goals"]:
        del users_data[uid]["goals"][goal_to_delete]
        save_users_data(users_data)
        await cq.answer(f"‚úÖ –¶–µ–ª—å '{goal_to_delete}' —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await cq.answer("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    await cq_goals_menu(cq)

# ------------------ –°–û–í–ï–¢–´ ------------------
TIPS = [
    "–í–µ–¥–∏—Ç–µ —É—á—ë—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç.",
    "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –Ω–∞ –≥–æ–¥.",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 50/30/20: 50% –Ω–∞ –Ω—É–∂–¥—ã, 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è, 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.",
    "–°–æ–∑–¥–∞–π—Ç–µ '–ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' ‚Äî –∑–∞–ø–∞—Å –¥–µ–Ω–µ–≥ –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤ –∂–∏–∑–Ω–∏ –±–µ–∑ –¥–æ—Ö–æ–¥–∞.",
    "–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞."
]

@dp.callback_query(F.data == "tips")
async def cq_tips(cq: CallbackQuery):
    await cq.answer()
    tip = random.choice(TIPS)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="tips")],
        [get_back_button()]
    ])
    await cq.message.edit_text(f"<b>üí° –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç:</b>\n\n<i>{tip}</i>", reply_markup=kb)

# ------------------ –ü–û–î–î–ï–†–ñ–ö–ê –ü–†–û–ï–ö–¢–ê ------------------
@dp.callback_query(F.data == "donate")
async def cq_donate(cq: CallbackQuery):
    await cq.answer()
    text = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–æ–µ–∫—Ç–∞! ‚ù§Ô∏è\n\n"
        "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n\n"
        "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª—é–±—É—é —Å—É–º–º—É –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã (–í–¢–ë):\n"
        f"<code>{VTB_CARD}</code> üëà (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)"
    )
    await cq.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]]))

# ------------------ PRO-–î–û–°–¢–£–ü ------------------
@dp.callback_query(F.data == "pro_menu")
async def cq_pro_menu(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    uid = str(cq.from_user.id)
    users_data = load_users_data()
    if users_data.get(uid, {}).get("pro", False):
        await cq.message.edit_text(
            "‚≠ê –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å PRO-–¥–æ—Å—Ç—É–ø! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            "<i>–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è PRO-—Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö).</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
        )
    else:
        await state.set_state(UserAction.waiting_for_pro_code)
        await cq.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à PRO-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button()]])
        )

@dp.message(F.text, UserAction.waiting_for_pro_code)
async def process_pro_code(message: Message, state: FSMContext):
    await state.clear()
    code = message.text.strip().upper()
    if code in PRO_CODES:
        uid = str(message.from_user.id)
        users_data = load_users_data()
        users_data[uid]["pro"] = True
        save_users_data(users_data)
        
        # –ö–æ–¥ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ.
        # –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.
        # –î–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –≤ —Ñ–∞–π–ª–µ –∏–ª–∏ –ë–î.
        PRO_CODES.remove(code)
        
        await message.answer("‚úÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> PRO-–¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await show_main_menu(message, "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.")
        await show_main_menu(message, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.")

# ------------------ –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î ------------------
@dp.message()
async def handle_unknown_message(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –Ω–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
    await state.clear()
    await message.answer(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚ò∞ –ú–µ–Ω—é</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=get_main_reply_keyboard()
    )

# ------------------ –ó–ê–ü–£–°–ö –ë–û–¢–ê ------------------
async def main():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, "w") as f:
            json.dump({}, f)
            
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
